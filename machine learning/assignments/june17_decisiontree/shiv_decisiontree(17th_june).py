# -*- coding: utf-8 -*-
"""Shiv_DecisionTree(17th june).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17S8Pl9J_6c6dwsCvzbGHxVOhL5FFr6nm

#### Datasets :
1. Indian Liver Patient Records  - https://www.kaggle.com/uciml/indian-liver-patient-records

2. Productivity Prediction of Garment Employees Data Set - https://archive.ics.uci.edu/ml/datasets/Productivity+Prediction+of+Garment+Employees
"""

import numpy as np
import pandas as pd
import sklearn
from sklearn.tree import DecisionTreeClassifier,DecisionTreeRegressor

"""#### **1. Indian Liver Patient Records** 

- Decision Tree Classifier is used
"""

ilp_dataset = pd.read_csv('https://raw.githubusercontent.com/shivshaktisahoo/test/main/indian_liver_patient.csv')
ilp_dataset.head()

ilp_dataset.info()
ilp_dataset.Albumin_and_Globulin_Ratio.describe()
ilp_dataset['Albumin_and_Globulin_Ratio'][240:256]
ilp_dataset['Albumin_and_Globulin_Ratio'] = ilp_dataset['Albumin_and_Globulin_Ratio'].fillna(round(ilp_dataset.Albumin_and_Globulin_Ratio.describe()['mean'], 2))
ilp_dataset['Gender'] = ilp_dataset['Gender'].map({"Male":1, "Female":0})
ilp_dataset = ilp_dataset.rename(columns={'Dataset':'LiverPatient'})
ilp_dataset['LiverPatient'] = ilp_dataset['LiverPatient'].map({1:1, 2:0})

X1 = ilp_dataset.drop(['LiverPatient'], axis=1)
Y1 = ilp_dataset['LiverPatient']
reg = DecisionTreeClassifier()
x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(X1,Y1,test_size=0.1)

reg.fit(x_train,y_train)
reg.score(x_test,y_test)

x_train.columns

# for i in ilp_dataset:
#   print(i,": ",sorted(ilp_dataset[i].unique()))

colmn_ilp = ['Age', 'Gender(for female - 0 & male -1)', 'Total_Bilirubin(0-100)', 'Direct_Bilirubin',
       'Alkaline_Phosphotase', 'Alamine_Aminotransferase',
       'Aspartate_Aminotransferase', 'Total_Protiens(0.0 - 10.0)', 'Albumin(0.0 - 10.0)',
       'Albumin_and_Globulin_Ratio']

list1 = []
for i in colmn_ilp:
  list1.append(float(input(f"Enter the value of {i} : ")))
arr = np.array(list1).reshape(1,-1)
reg.predict(arr)[0]

output_ilp = ['No Liver Diseases','Liver Diseases']  # 0 - no liver diseases and 1- liver diseases
print(f"Report : {output_ilp[reg.predict(arr)[0]]}")





"""#### **2. Productivity Prediction of Garment Employees Data Se**t

- Decision Tree Regressor is used
"""

garments_dataset = pd.read_csv('https://raw.githubusercontent.com/shivshaktisahoo/test/main/garments_worker_productivity.csv')
garments_dataset

## preprocessing /////////////////
garments_dataset['wip'] = garments_dataset['wip'].fillna(0)
garments_dataset['quarter'] = garments_dataset['quarter'].map({'Quarter1':1, 'Quarter2':2, 'Quarter3':3, 'Quarter4':4, 'Quarter5':5})
for i in range(len(garments_dataset)):
  garments_dataset['department'][i] = garments_dataset['department'][i].strip()
garments_dataset['department'] = garments_dataset['department'].map({'sweing':1, 'finishing':0})
garments_dataset['day'] = garments_dataset['day'].map({'Saturday':1, 'Sunday':2, 'Monday':3, 'Tuesday':4, 'Wednesday':5,'Thursday':6})

X = garments_dataset.drop(['date','actual_productivity'], axis=1)
Y = garments_dataset['actual_productivity']
garments_dataset

x_train, x_test, y_train, y_test =  sklearn.model_selection.train_test_split(X,Y,test_size=0.1)
reg1 = DecisionTreeRegressor()
reg1.fit(x_train,y_train)
reg1.score(x_test,y_test)

x_train.columns

colms = ['quarter (value from 1-5)', 'department (0 or 1)', 'day (1-6)', 'team', 'targeted_productivity (value between 0.0 to 1.0)', 'smv(0-30)',
       'wip', 'over_time', 'incentive', 'idle_time', 'idle_men(0-2)',
       'no_of_style_change', 'no_of_workers']
list1 = []
for i in colms:
  list1.append(float(input(f"Enter the value of {i} : ")))
arr1 = np.array(list1).reshape(1,-1)
reg1.predict(arr1)[0]

print(f"Actual Productivity will be {reg1.predict(arr1)[0]*100}%")

"""#### **correlation part**

##### indian liver dataset
"""

ilp_dataset

ilp_corr = ilp_dataset.corr()
ilp_corr

MIN_THRES = 0.04
final_attr = []
for i in ilp_corr.drop(['LiverPatient'],axis=1):
  if abs(ilp_corr[i]['LiverPatient']) >= MIN_THRES:
      final_attr.append(i)
final_attr

"""distance formula task"""

d1 = ilp_dataset[final_attr]
d1

d1.loc[0,'Age']

d1["attr_distance"] = 0
sum1 = 0 
attr_pts = [45,0,0.4,0.5,137,12,13,4.3,0.50]
for i in range(len(d1)):
  for j in enumerate(ilp_dataset[final_attr]):
    sum1 += (d1.loc[i,j[1]] - attr_pts[j[0]])**2
  d1["attr_distance"][i] = (sum1)**(1/2)
  sum1 = 0

d1





"""##### garments dataset"""

g1 = garments_dataset.drop(['date'], axis=1)
g1

garments_corr = g1.corr()
garments_corr

MIN_THRES = 0.05
garments_final_attr = []
for i in garments_corr.drop(['actual_productivity'],axis=1):
  if abs(garments_corr[i]['actual_productivity']) >= MIN_THRES:
      garments_final_attr.append(i)
garments_final_attr

"""distance formula task

"""

d2 = garments_dataset[garments_final_attr]
d2

d2.loc[0,'quarter']

d2["attr_distance"] = 0
sum1 = 0 
attr_pts = [1,1,8,0.50,23.16,2000,98,0.0,0,0,39.0]
for i in range(len(d2)):
  for j in enumerate(garments_dataset[garments_final_attr]):
    sum1 += (d2.loc[i,j[1]] - attr_pts[j[0]])**2
  d2["attr_distance"][i] = (sum1)**(1/2)
  sum1 = 0

d2
# -*- coding: utf-8 -*-
"""Shiv_Regression_Underfitting_Overfitting_DataSets(10th june).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nhdKmxzAG04NoOET8AxHxdpvn6Cg68Aq
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
plt.rcParams["figure.figsize"] = (15,5)

"""# 1. Salaries Datasets"""

dataset1 = pd.read_csv("https://raw.githubusercontent.com/shivshaktisahoo/test/main/salaries.csv")
dataset1.head(3)

x = dataset1['Years of Experience']
y = dataset1['Salary']
sum1 = 0 
sum2 = 0
for i in range(len(dataset1)):
  sum1 += (x[i] - x.mean()) * (y[i] - y.mean())
  sum2 += (x[i] - x.mean())**2 

m = sum1/sum2
c = y.mean() - m*x.mean()
print(f"Slope(m) = {m}\nIntercept(c) = {c}")

x_minval = x.min()-1
x_maxval = x.max()+1
plot_x = np.linspace(x_minval,x_maxval,10)
plot_y = m * plot_x + c
print(plot_x)
print(plot_y)

plt.plot(plot_x,plot_y,color="green")
plt.scatter(x,y,linewidth=1)
plt.title("Salaries  Chart :", color="Red", size=20)
plt.xticks(size=12)
plt.yticks(size=12)
plt.xlabel("Years of Experience -------->",c='Brown', size=15)
plt.ylabel("Salary (in $)--------->",c='Brown', size=15)
plt.grid()
plt.show()

def predict(x):
  return round(m*x+c)
def  error(y_actual, y_predicted):
  err = abs(y_actual - y_predicted)
  return round((err/y_actual)*100)
arr1 = np.array([])
for year, salary in zip(x,y):
  # print(f"Prediction is {predict(year)} actual is {salary}, ERROR : {error(salary,predict(year))}%")
  arr1 = np.append(arr1,error(salary,predict(year)))
accuracy = 100 - arr1.mean()
print(f"Accuracy of model is {accuracy}")

"""# 2. Real estate price prediction Datasets"""

dataset2 = pd.read_csv("https://raw.githubusercontent.com/shivshaktisahoo/test/main/Real%20estate.csv")
dataset2.head()

x = dataset2['X2 house age']
y = dataset2['X3 distance to the nearest MRT station']
sum1 = 0 
sum2 = 0
for i in range(len(dataset2)):
  sum1 += (x[i] - x.mean()) * (y[i] - y.mean())
  sum2 += (x[i] - x.mean())**2 
m = sum1/sum2
c = y.mean() - m*x.mean()
print(f"Slope(m) = {m}\nIntercept(c) = {c}")

x_minval = x.min()-1
x_maxval = x.max()+1
plot_x = np.linspace(x_minval,x_maxval,10)
plot_y = m * plot_x + c
print(plot_x)
print(plot_y)

plt.plot(plot_x,plot_y,color="green")
plt.scatter(x,y)
plt.title("Real estate price prediction :", color="Red", size=20)
plt.xticks(size=12)
plt.yticks(size=12)
plt.xlabel("X2 house age -------->",c='Brown', size=13)
plt.ylabel("X3 distance to the nearest MRT station --->",c='Brown', size=13)
plt.grid()
plt.show()

def predict(x):
  return round(m*x+c)
def  error(y_actual, y_predicted):
  err = abs(y_actual - y_predicted)
  return round((err/y_actual)*100)
arr1 = np.array([])
for x1, y1 in zip(x,y):
  # print(f"Prediction is {predict(x1)} actual is {y1}, ERROR : {error(y1,predict(x1))}%")
  arr1 = np.append(arr1,error(y1,predict(x1)))
# print(arr1)
accuracy = 100 - arr1.mean()
print(f"Accuracy of model is {accuracy}")



"""# 3. Medical Cost Personal Datasets"""

dataset3 = pd.read_csv("https://raw.githubusercontent.com/shivshaktisahoo/test/main/insurance.csv")
dataset3

x = dataset3['bmi']
y = dataset3['charges']
sum1 = 0 
sum2 = 0
for i in range(len(dataset3)):
  sum1 += (x[i] - x.mean()) * (y[i] - y.mean())
  sum2 += (x[i] - x.mean())**2 

m = sum1/sum2
c = y.mean() - m*x.mean()
print(f"Slope(m) = {m}\nIntercept(c) = {c}")

x_minval = x.min()-1
x_maxval = x.max()+1
plot_x = np.linspace(x_minval,x_maxval,10)
plot_y = m * plot_x + c
print(plot_x)
print(plot_y)

plt.plot(plot_x,plot_y,color="green")
plt.scatter(x,y)
plt.title("Medical Cost Personal prediction :", color="Red", size=20)
plt.xticks(size=12)
plt.yticks(size=12)
plt.xlabel("BMI -------->",c='Brown', size=15)
plt.ylabel("Charges--------->",c='Brown', size=15)
plt.grid()
plt.show()

def predict(x):
  return round(m*x+c)
def  error(y_actual, y_predicted):
  err = abs(y_actual - y_predicted)
  return round((err/y_actual)*100)
arr1 = np.array([])
for x1, y1 in zip(x,y):
  # print(f"Prediction is {predict(x1)} actual is {y1}, ERROR : {error(y1,predict(x1))}%")
  arr1 = np.append(arr1,error(y1,predict(x1)))
# print(arr1)
accuracy = 100 - arr1.mean()
print(f"Accuracy of model is {accuracy}")